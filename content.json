{"meta":{"title":"王学长","subtitle":"清醒的人最荒唐","description":"欢迎来到王学长的乐园","author":"王学长","url":"http://www.wangxuezhang.xin"},"pages":[{"title":"Tagcloud","date":"2018-04-06T05:39:23.759Z","updated":"2018-04-06T05:39:23.759Z","comments":true,"path":"tags.html","permalink":"http://www.wangxuezhang.xin/tags.html","excerpt":"","text":""},{"title":"categories","date":"2017-12-27T08:23:47.000Z","updated":"2017-12-27T13:57:17.372Z","comments":true,"path":"categories/index.html","permalink":"http://www.wangxuezhang.xin/categories/index.html","excerpt":"","text":"Python接入网技术"},{"title":"tags","date":"2017-12-27T08:55:42.000Z","updated":"2017-12-27T13:51:55.622Z","comments":true,"path":"tags/index-1.html","permalink":"http://www.wangxuezhang.xin/tags/index-1.html","excerpt":"","text":"Python接入网技术网络方面电脑疑难杂症CTF随笔"},{"title":"tags","date":"2017-12-27T08:18:20.000Z","updated":"2018-04-06T03:57:38.294Z","comments":true,"path":"tags/index.html","permalink":"http://www.wangxuezhang.xin/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Centos7 下安装Nagios监控","slug":"Centos7-下安装Nagios监控","date":"2018-04-22T04:28:15.000Z","updated":"2018-04-24T06:18:47.662Z","comments":true,"path":"2018/04/22/Centos7-下安装Nagios监控/","link":"","permalink":"http://www.wangxuezhang.xin/2018/04/22/Centos7-下安装Nagios监控/","excerpt":"Nagios简介Nagios是一款企业级开源免费的监控工具,该工具可以监控应用服务器,交换机路由器等网络设备,并且在服务或设备发送异常时发出报警信息.部署Nagios除了需要安装主程序,还需要安装相关插件,Nagios是整个监控平台的主程序,Nagios-plugins是必选的插件程序.官方还提供了其它的附加插件.其中,NRPE插件用来监控远程Linux服务器的主机资源,NSClient++插件用来监控Linux主机,NDOUtils插件需要结合数据库系统将Nagios进程的当前数据和历史数据写进数据库.Nagios可以监控的常见的HTTP,POP3,SMTP,FTP,SSH,PING等服务器,也可以监控主机的CPU和磁盘等主机资源. 实验环境 IP 系统 备注 10.22.30.7 Centos7 Nagios服务端 10.22.30.8 Centos7 web1 10.22.30.20 Ubuntu16.04 web2","text":"Nagios简介Nagios是一款企业级开源免费的监控工具,该工具可以监控应用服务器,交换机路由器等网络设备,并且在服务或设备发送异常时发出报警信息.部署Nagios除了需要安装主程序,还需要安装相关插件,Nagios是整个监控平台的主程序,Nagios-plugins是必选的插件程序.官方还提供了其它的附加插件.其中,NRPE插件用来监控远程Linux服务器的主机资源,NSClient++插件用来监控Linux主机,NDOUtils插件需要结合数据库系统将Nagios进程的当前数据和历史数据写进数据库.Nagios可以监控的常见的HTTP,POP3,SMTP,FTP,SSH,PING等服务器,也可以监控主机的CPU和磁盘等主机资源. 实验环境 IP 系统 备注 10.22.30.7 Centos7 Nagios服务端 10.22.30.8 Centos7 web1 10.22.30.20 Ubuntu16.04 web2 Nagios服务端安装部署监控服务器软件监控服务器需要安装HTTP,PHP,Nagios,Nagios-Plugins以及NRPE软件包.首先安装Nagios所依赖的软件包[root@nagios ~]# yum -y install gd gd-devel openssl openssl-devel httpd php gcc glibc glibc-common make net-nmap wget安装Nagios主程序时,源码包可以从sourceforge.net网站下载.安装前需要为nagios创建账户和组.1234[root@nagios soft]# /usr/sbin/useradd nagios[root@nagios soft]# /usr/sbin/groupadd nagcmd[root@nagios soft]# /usr/sbin/usermod -a -G nagcmd nagios[root@nagios soft]# /usr/sbin/usermod -a -G nagcmd apache 软件包我都已经下载好了,可以直接解压安装. 1234567[root@nagios soft]# tar -zxvf nagios-4.3.1.tar.gz[root@nagios soft]#./configure --with-nagios-user=nagios --with-nagios-group=nagcmd[root@nagios nagios-4.3.1]#make all[root@nagios nagios-4.3.1]#make insall[root@nagios nagios-4.3.1]#make install-init[root@nagios nagios-4.3.1]#make install-commandmode[root@nagios nagios-4.3.1]#make install-config 由于nagios需要以Web界面进行管理与监控,安装过程中使用make install-webconf命令生成一个Web配置文件.该文件可以使管理员通过访问web界面管理与维护Nagios监控系统[root@nagios nagios-4.3.1]#make install-webconf Nagios的特色就是许多强大的插件,可以根据自己的需求选择相应的插件.这里只安装nagios-plugins和nrpe两个插件 安装nagios-pluins12345[root@nagios ~]# tar -zxvf nagios-plugins-2.2.1.tar.gz[root@nagios ~]# cd nagios-plugins-2.2.1/[root@nagios nagios-plugins-2.2.1]# ./configure --prefix=/usr/local/nagios[root@nagios nagios-plugins-2.2.1]#make[root@nagios nagios-plugins-2.2.1]#make install 安装nrpe1234567[root@nagios ~]# tar -zxvf nrpe-2.14.tar.gz[root@nagios ~]# cd nrpe-2.14/[root@nagios nrpe-2.14]#./configure[root@nagios nrpe-2.14]#make all[root@nagios nrpe-2.14]#make install-plugin[root@nagios nrpe-2.14]#make install-daemon[root@nagios nrpe-2.14]#make install-daemon-config 安装Nagios时,已经复制了一份nagios.conf文件到Apache的配置文件下.下面根据实际需求创建账户信息文件,系统会提示输入密码[root@nagios ~]# htpasswd -c /usr/local/nagios/etc/htpasswd.users nagios开放iptables的80端口[root@nagios ~]# iptables -I INPUT -p tcp --dport 80 -j ACCEPT启动服务:[root@nagios ~]# systemctl restart httpd[root@nagios ~]# systemctl restart nagios 修改Nagios配置文件Nagios配置文件比较多,下面是主要的配置文件的名称与简要描述 配置文件名称 描述 nagios.conf Nagios主配置文件 nrpe.cfg NRPE远程监控配置文件 cgi.conf CGI程序配置文件 commands.cfg 命令定义文件 contacts.cfg 联系人与联系定义文件 timeperiods.cfg CGI程序配置文件 templates.cfg 对象定义参考模版 localhost.cfg 监控本机的配置文件模版 printer.cfg 对象定义参考模版 switch.cfg 监控交换机的配置文件模版 windows.cfg 监控windows的配置文件模版 修改主配置文件,因为需要监控两台web主机,所以需要加载web1.cfg和web2.cfg[root@nagios ~]# vim /usr/local/nagios/etc/nagios.cfg 修改CGI配置文件,添加nagios账户允许使用CGI程序由于配置文件太长,所以过滤显示一下 修改命令配置文件,该文件定义具体的命令实现方式.[root@nagios ~]# vim /usr/local/nagios/etc/objects/commands.cfg 创建远程监控配置文件web1.cfg和web2.cfg.这个可以手动创建,我是直接copy localhost.cfg为模版,然后修改数据的.web2.cfg也跟web1.cfg差不多,修改主机名称,IP地址就可以了.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061define host&#123; use linux-server host_name wlzx alias wlzx address 10.22.30.9 &#125;define hostgroup&#123; hostgroup_name 10.22.30.9 ; The name of the hostgroup alias Linux Servers ; Long name of the group members wlzx ; Comma separated list of hosts that belong to this group &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description PING check_command check_ping!100.0,20%!500.0,60% &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description Root Partition check_command check_local_disk!20%!10%!/ &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description Current Users check_command check_local_users!20!50 &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description Total Processes check_command check_local_procs!250!400!RSZDT &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description Current Load check_command check_local_load!5.0,4.0,3.0!10.0,6.0,4.0 &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description Swap Usage check_command check_local_swap!20!10 &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description SSH check_command check_ssh notifications_enabled 0 &#125;define service&#123; use local-service ; Name of service template to use host_name wlzx service_description HTTP check_command check_http notifications_enabled 0 &#125; 修改配置文件的时候容易出错.导致服务无法启动.可以使用/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg定位问题所在 重启nagios服务[root@nagios objects]# /etc/init.d/nagios restart Nagios客户端安装Nagios客户端需要安装nagios-plugin和nrpe软件包.下面以web1为例.(软件都已经下载好了)安装nagios-plugin123456789[root@web1 ~]# yum -y install openssl openssl-devel[root@web1 ~]# groupadd nagios[root@web1 ~]# useradd -g nagios -s /sbin/nologin nagios[root@web1 soft]# tar -zxvf nagios-plugins-2.2.1.tar.gz[root@web1 soft]# cd nagios-plugins-2.2.1[root@web1 nagios-plugins-2.2.1]# ./configure --with-nagios-user=nagios --with-nagios-group=nagios --prefix=/usr/local/nagios[root@web1 nagios-plugins-2.2.1]# make[root@web1 nagios-plugins-2.2.1]# make install[root@web1 nagios-plugins-2.2.1]# chown -R nagios.nagios /usr/local/nagios/ 安装nrpe1234567[root@web1 soft]# tar -zxvf nrpe-2.14.tar.gz[root@web1 soft]# cd nrpe-2.14[root@web1 nrpe-2.14]# ./configure[root@web1 nrpe-2.14]# make all[root@web1 nrpe-2.14]# make install-plugin[root@web1 nrpe-2.14]# make install-daemon[root@web1 nrpe-2.14]# make install-daemon-config 修改客户端配置文件,添加可以监控的主机[root@web1 ~]# vim /usr/local/nagios/etc/nrpe.cfg 123[root@web1 ~]# /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d[root@web1 ~]# echo &quot;[root@web1 ~]# /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d&quot; &gt;&gt; /etc/rc.local[root@web1 ~]# iptables -I INPUT -p tcp --dport 5666 -j ACCEPT 可以用check_nrpe检测被监控端的版本号objects]#-H 10.22.30.91NRPE v2.14 两台主机都设置好了之后,浏览器访问nagios的地址,就可以访问web监控界面了 如果想监控windows主机的话,需要在windows主机上安装NSClient++,nagios创建windows主机的.cfg文件即可","categories":[],"tags":[]},{"title":"Centos下搭建DNS服务器","slug":"Centos7下搭建DNS服务器","date":"2018-04-11T04:15:00.000Z","updated":"2018-04-12T07:58:05.839Z","comments":true,"path":"2018/04/11/Centos7下搭建DNS服务器/","link":"","permalink":"http://www.wangxuezhang.xin/2018/04/11/Centos7下搭建DNS服务器/","excerpt":"部署主域名服务器实验环境Centos7 IP:10.22.30.10 （DNS服务器）Ubuntu16.04 IP:10.22.30.20 (Web服务器)Server2008 IP:10.22.30.3 (ftp服务器) 安装软件 在部署DNS服务器时需要安装bind、bind-chroot、bind-util软件包[root@DNS ~]# yum -y install bind bind-chroot bind-utils","text":"部署主域名服务器实验环境Centos7 IP:10.22.30.10 （DNS服务器）Ubuntu16.04 IP:10.22.30.20 (Web服务器)Server2008 IP:10.22.30.3 (ftp服务器) 安装软件 在部署DNS服务器时需要安装bind、bind-chroot、bind-util软件包[root@DNS ~]# yum -y install bind bind-chroot bind-utils 修改主配置文件 配置文件/etc/named.conf [root@DNS ~]# vim /etc/named.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# options选项用来定义一些影响D整个DNS服务器的环境options &#123; listen-on port 53 &#123; any; &#125;; #表示bind在53端口监听任何的IPv4地址 listen-on-v6 port 53 &#123; ::1; &#125;; #表示bind在53号端口监听任何的IPv6地址 directory &quot;/var/named&quot;; #表示设置工作目录 dump-file &quot;/var/named/data/cache_dump.db&quot;; #设置缓存转储的目录 statistics-file &quot;/var/named/data/named_stats.txt&quot;; #记录统计信息的文件 memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;; #记录内存使用情况 allow-query &#123; any; &#125;; #允许任何主机查询 /* - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion. - If you are building a RECURSIVE (caching) DNS server, you need to enable recursion. - If your recursive DNS server has a public IP address, you MUST enable access control to limit queries to your legitimate users. Failing to do so will cause your server to become part of large scale DNS amplification attacks. Implementing BCP38 within your network would greatly reduce such attack surface */ recursion yes; #允许递归查询 dnssec-enable no; #是否支持dnssec开关 dnssec-validation no; #是否支持dnssec确认开关 /* Path to ISC DLV key */ bindkeys-file &quot;/etc/named.iscdlv.key&quot;; #ISC DLV KEY的路径 managed-keys-directory &quot;/var/named/dynamic&quot;; # 管理的密钥路径 pid-file &quot;/run/named/named.pid&quot;; # 服务器记录进程ID的文件路径 session-keyfile &quot;/run/named/session.key&quot;; #会话密钥文件&#125;;# logging 定义了bind服务的日志logging &#123; channel default_debug #定义通道 &#123; file &quot;data/named.run&quot;; #写入“data/named.run”文件 severity dynamic; #消息的严重性等级匹配服务器当前的调试级别 &#125;;&#125;;#zone用来定义每个具体的解析区域zone &quot;.&quot; IN &#123; type hint; #区域类型 file &quot;named.ca&quot;; #区域文件名&#125;;zone &quot;wangxuezhang.com&quot; &#123; type master; #类型为master file &quot;wangxuezhang.com.zone&quot;; &#125;;zone &quot;30.22.10.in-addr.arpa&quot;&#123; type master; file &quot;30.22.10.in-addr.arpa.zone&quot;;&#125;;include &quot;/etc/named.rfc1912.zones&quot;;include &quot;/etc/named.root.key&quot;; 配置服务器的正向区域文件[root@DNS ~]# vim /var/named/wangxuezhang.com.zonePS:要与主配置文件中的正向解析区域中的file一致1234567891011$TTL 1D #缓存时间@ IN SOA wangxuezhang.com. root.wangxuezhang.com. ( 2080410 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum@ IN NS dns.wangxuezhang.com. #DNS服务器的域名地址dns IN A 10.22.30.10 #DNS服务器的IP地址 www IN A 10.22.30.20 #Web服务器的IP地址ftp IN A 10.22.30.3 #Ftp服务器的IP地址 配置服务器的反向解析文件[root@DNS ~]# vim /var/named/30.22.10.in-addr.arpa.zonePS:要与主配置文件中的反向解析区域中的file一致12345678910111213$TTL 86400@ IN SOA 30.22.10.in-add.arpa. root.wangxuezhang.com ( 20180410; serial 28800; refresh 14400; retry 3600000; expire 86400); minimum@ IN NS dns.wangxuezhang.com.#PTR记录#IP地址 Internet类 PTR标识 FQDN10 IN PTR dns.wangxuezhang.com20 IN PTR www.wangxuezhang.com3 IN PTR ftp.wangxuezhang.com 更改配置文件的所属组[root@DNS ~]# chgrp named /etc/named.conf[root@DNS ~]# chgrp named /var/named/wangxuezhang.com.zone[root@DNS ~]# chgrp named /var/named/30.22.10.in-addr.arpa.zone 重启DNS服务并测试[root@DNS ~]# systemctl restart named 重启dns服务1.Linux环境下的测试客户机用的是Centos7,IP:10.22.30.9[root@Client ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens32用nslookup来测试域名解析情况2.Windows环境下的测试先填上dns服务器的地址从测试结果来看,正反解析结果都是OK的 搭建DNS服务中出现的问题搭建过程中出了不少问题,但是都是小问题,例如这种: 还有一些其它的,由于粗心,名字打错了,少了小数点什么的.但是查看日志文件的变化+百度都能解决.","categories":[{"name":"linux","slug":"linux","permalink":"http://www.wangxuezhang.xin/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://www.wangxuezhang.xin/tags/linux/"}]},{"title":"构建高性能的MYSQL集群系统","slug":"构建高性能的Mysql集群系统","date":"2018-04-06T05:43:00.000Z","updated":"2018-04-08T02:56:23.159Z","comments":true,"path":"2018/04/06/构建高性能的Mysql集群系统/","link":"","permalink":"http://www.wangxuezhang.xin/2018/04/06/构建高性能的Mysql集群系统/","excerpt":"常见的高可用MYSQL解决方案主从复制解决方案 这是MYSQL自身提供的一种高可用解决方案，数据同步方法采用的是MYSQL replication技术。MYSQL replication技术就是一个日志的复制过程，在复制过程钟一台服务器充当主服务器，而一台服务器或多台服务器充当从服务器，简单说就是，从服务器到主服务器拉取二进制日志文件，然后再将日志文件解析成相应的SQL在从服务器上执行一遍主服务器的操作，从而保证数据的一致性。 MYSQL replication技术仅仅提供了日志的同步执行功能，而从服务器只能提供读操作，并且当主服务器发生故障时，必须手动处理failover，通常的做法是将一台从服务器更改为主服务器。这种解决方案在一定程度上实现了MYSQL的高可用性，可以实现90.000%的SLA。 为了达到更高的可用性，在实际的应用环境中，一般都采用MYSQL replication技术配合高可用集群软件来实现自动failover，这种方式可以实现95.000%的SLA。","text":"常见的高可用MYSQL解决方案主从复制解决方案 这是MYSQL自身提供的一种高可用解决方案，数据同步方法采用的是MYSQL replication技术。MYSQL replication技术就是一个日志的复制过程，在复制过程钟一台服务器充当主服务器，而一台服务器或多台服务器充当从服务器，简单说就是，从服务器到主服务器拉取二进制日志文件，然后再将日志文件解析成相应的SQL在从服务器上执行一遍主服务器的操作，从而保证数据的一致性。 MYSQL replication技术仅仅提供了日志的同步执行功能，而从服务器只能提供读操作，并且当主服务器发生故障时，必须手动处理failover，通常的做法是将一台从服务器更改为主服务器。这种解决方案在一定程度上实现了MYSQL的高可用性，可以实现90.000%的SLA。 为了达到更高的可用性，在实际的应用环境中，一般都采用MYSQL replication技术配合高可用集群软件来实现自动failover，这种方式可以实现95.000%的SLA。 MMM高可用解决方案 MMM(Master-Master Replication Manager for MYSQL)MYSQL主主复制管理器，提供了MYSQL主主复制配置的监控、故障转移和管理的一套可伸缩的脚本套件。在MMM高可用解决方案中，典型的应用是双主多从架构，通过MYSQL reqlication技术可以实现两台服务器互为主从，且在任何时候只有一个节点可以写入，避免多点写入的数据冲突。同时，当可写的主节点故障时，MMM套件可以立即监控到，然后将服务自动切换到另一个主节点，继续提供服务，从而实现MYSQL的高可用。MMM方案是目前比较成熟的MYSQL高可用解决方案，可以实现99.000%的SLA。 Heartbeat/SAN高可用解决方案 Heartbeat/SAN高可用解决方案是借助第三方软件硬件实现的，在这个方案中，处理failover的方式是高可用集群软件Heartbeat，它监控和管理各个节点间连接的网络，并监控集群服务，当节点出现故障或者服务不可用时，自动在其它节点启动集群服务。 在数据共享方面，通过SAN存储来共享网络，在正常状态下，集群主节点将挂载存储进行数据读写，当集群发生故障时，Heartbeat会首先通过一个仲裁设备将主节点挂载的存储设备释放。然后在备用节点下挂载存储，接着启动服务。通过这种方式实现数据的共享和同步。这种数据共享方式实现简单，但是成本较高，并且存在脑裂的问题，需要根据实际环境来选择。这种方案可以实现99.990%的SLA Heartbeat/DRBD高可用解决方案 Heartbeat/DRBD高可用解决方案也是借助第三方软硬件实现的，在处理failover的方式上依旧采用Heartbeat，不同的是，在数据共享方面，采用了基于块级别的数据同步软件DRBD来实现。 DRBD是一个用软件是实现的、无共享的、服务器之间镜像块设备内容的存储复制解决方案。和SAN网络不同，它并不共享存储，而是通过服务器之间的网络复制数据。这种方案实现起来稍微复杂，同时也存在脑裂问题，可以实现99.900%的SAL。 MYSQL Cluster高可用解决方案 MYSQL Cluster由一组服务节点构成，每个服务器节点上均运行着多种进程，包括MYSQL服务器、NDB Cluster的数据节点、管理服务器，以及专门的数据访问程序。此解决方案是MYSQL官方主推的技术方案，功能强大，但是由于实现较为繁琐，配置麻烦，企业实际应用并不多。MYSQL Cluster的标准版和电信版可以达到99.999%的SLA。 通过Keepalived搭建MYSQL双主模式的高可用集群系统MYSQL Replication介绍 MYSQL Replication 是MYSQL自身提供的一个主从复制功能，其实也就是一台MYSQL服务器（称为Slave）从另外一台MYSQL服务器（成为Master）上复制日志，然后解析日志应用到自身的过程。MYSQL Replication是单向、异步复制，基本复制过程为：Master服务器首先将更新写进二进制文件，并维护文件的一个索引以跟踪日志的循环。这些日志文件可以发送到Slave文件进行更新。当一台服务器连接Master服务器时，他从Master服务器日志中读取上一次成功更新的位置。然后Slave服务器开始接收从上一次完成更新后发生的所有更新，所有更新完成，将等待主服务器通知新的更新 MYSQL Replication 支持链式复制，也就是说Slave服务器下还可以再链接Slave服务器，同时Slave服务器也可以充当Master的角色。但是，在MYSQL主从复制钟，所有表的更新必须在Master服务器上进行，Slave服务器仅能提供查询操作。 MYSQL Replication 实现原理 MYSQL Replication 是一个从Master复制到一台或者多台Slave的异步过程，在Master与Slave之间实现整个复制过程主要是由三个线程来完成，其中一个IO线程在Master端，另两个线程（SQL线程和IO端）在Slave端要实现MYSQL Replication，首先在Master服务器上打开MYSQL的Binary Log（产生二进制文件）功能，因为整个复制过程实际上就是Slave从Master端获取该日志，然后自身将二进制文件解析为SQL语句并完全顺序的执行SQL语句所记录的所有操作。 MYSQL Replication 常用架构MYSQL Replication 技术在实际应用中有多种实现架构，常见的有： 一主一丛：即一台Master服务器和一台Slave服务器。这是最常见的架构。 一主多从：即一台Master服务器和两台或以上Slave服务器。经常用在写操作不频繁、查询量比较大的业务环境中。 主主互备：又称双主互备，即两台MYSQL Server互相将对方作为自己的Master，自己同时又作为对方的Slave来进行复制。主要用于对MYSQL 写操作要求比较高的环境中，避免了MYSQL单点故障。 双主多从：其实就是双主互备，然后再加上多台Slave服务器。主要用于写操作比较高，同时查询量比较大的环境中。MYSQL 主主互备模式配置拓扑图上图中，DB1和DB2互为主从，这样保证了两台服务器MYSQL的数据始终是同步的，同时在DB1和DB2上还要安装高可用软件Keepalived。在正常情况下，Web Server主机仅对DB1进行读写，DB2只负责同步DB1的数据。而Keepalived维护着一个VIP，此IP用来对外提供连接服务，同时keepalived还负责监控DB1和DB2上的MYSQL数据库的运行状态，当DB1主机出现故障或者MYSQL运行异常时，自动将VIP地址和MYSQL服务切换到DB2上，此时Web Server主机继续从DB2上进行数据的读写操作。通过Keepalived保持了数据库服务的连续性，整个切换过程非常快，并且对前端Web Server主机是透明的。下面开始配置MYSQL主主互备。 修改MYSQL 配置文件.server-id是节点标识，主、从节点不能相同，必须全局唯一。log-bin表示开启MYSQL的binlog日志功能。”mysql-bin”表示日志文件的命名格式。relay-log用来定义relay-log日志文件的命名格式replicate-wild-ignore-table是个复制过滤选项，可以过滤不需要同步的数据库或表 创建复制用户并授权先在DB1上创建复制用户db2，密码qwerasdf。DB1上show master stutus中的mysql-bin.000011和Postion的数据326就是对应DB2设置主服务器时的master_log_file和master_log_pos。接着启动slave：mysql&gt;start salve;查看DB2上slave运行的状态通过查看slave的运行状态可以发现一切运行正常，这里需要关注的重点是Slave_IO_Runing和Slave_SQL_Runing，这两个就是在Slave节点上运行的主从复制线程，正常情况下这两个值都应该为Yes。到这里，从DB1到DB2的MYSQL主从复制已经完成。接下来开始配置从DB2到DB1的MYSQL主从复制，配置过程与上面的过程完全一样，首先在DB2上创建复制用户 db1 密码qwerasdf。然后在DB1中将DB2设为自己的主服务器。最后启动slave服务，mysql&gt;start slave;可以看到Slave_IO_Running和Slave_SQL_Runing都是Yes状态，表明DB1上复制服务器运行正常。至此,MYSQL双主模式的主从配置完毕。 配置Keepalived实现MYSQL双主高可用安装keepalived1.官网下载keepalived最新版1234wget http://www.keepalived.org/software/keepalived-1.4.2.tar.gz`/configure --prefix=/usr/local/keepalivedmakemake install 将配置文件拷贝到系统对应的目录下：1234mkdir /etc/keepalivedcp keepalived-1.4.2/keepalived/etc/init.d/keepalived /etc/init.d/cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived 配置keepalivedvim /etc/keepalived/keepalived.conf编写检测服务down后所要执行的脚本vim /etc/keepalived/checkmysql.sh12#!/bin/shpkill keepalived 完成所有配置后启动keepalived，正常情况下VIP地址应该是在DB1服务器 测试MYSQL主从同步功能1：在远程客户端上通过VIP登录测试客户端的地址是10.22.30.20，用CRT新开了一个窗口进行连接。由于采用远程登录测试，DB1和DB2服务器都要事先进行授权从SQL输出结果来看，可以通过VIP登录，并登录了DB1服务器。 2：数据复制功能测试刚刚已经远程登录了VIP，现在进行读写操作测试创建了一个数据库wang,建了一个test表，并且在表中插入了数据，现在登录DB2主机，查询是否同步。截图中可以看出，刚刚创建的东西都同步到了DB2上。 测试keepaliced实现MYSQL故障转移1：keepalived故障转移测试VIP机器默认是在优先级搞的服务器上，也就是DB1上，现在把DB1上的keepalived服务器stop掉，观察VIP是否会自动切换到DB2上。输出结果可以看出，DB1上的keepalived服务停止后，VIP自动切换到了DB2上去了。（查看日志的变化可以更好的观察VIP切换的过程 tail -f /var/log/messages）2:MySQL故障转移测试关闭DB1上的mysql服务器,查看VIP是否会切换到DB2上这是DB1上的日志，一旦keepalived检测到mysql服务停止后，keepalived也停止了，这时VIP就切换到了DB2上去了，并且切换的速度非常快。 多看书…..中途esxi服务器由于断电导致我的服务器全部GG,导致这个实验做了几天,但是运气好自己整好了。还是得多看书…..","categories":[{"name":"mysql","slug":"mysql","permalink":"http://www.wangxuezhang.xin/categories/mysql/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://www.wangxuezhang.xin/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"http://www.wangxuezhang.xin/tags/mysql/"}]},{"title":"Centos 下安装DHCP服务器","slug":"RedHat-下安装DHCP服务器","date":"2018-04-03T02:53:00.000Z","updated":"2018-04-03T05:06:27.433Z","comments":true,"path":"2018/04/03/RedHat-下安装DHCP服务器/","link":"","permalink":"http://www.wangxuezhang.xin/2018/04/03/RedHat-下安装DHCP服务器/","excerpt":"1:安装DHCP服务器# yum install -y dhcp*","text":"1:安装DHCP服务器# yum install -y dhcp* DHCP的默认配置文件路径/etc/dhcp/dhcpd.conf 2:简单配置DHCP服务器# vim /etc/dhcpd/dhcpd.conf发现安装了DHCP服务默认是有一个配置样例的,配置样例的路径为/usr/share/doc/dhcp-4.2.5/dhcpd.example将默认的配置样例复制到dhcpd.conf下cp /usr/share/doc/dhcp-4.2.5/dhcpd.example /etc/dhcp/dhcpd.conf询问是否覆盖的时候选yes # vim /etc/dhcpd/dhcpd.conf 保存后重启dhcp服务systemctl restart dhcpdPS:配置文件中语法错误的话，dhco服务会重启失败的 验证DHCP服务客户机设置为dhcp获取地址,这里用了两台客户机，一台linux，一台server 2008.Linux的dhcp情况 Server 2008的dhcp情况 在DHCP服务器上可以查看客户端获取dhcp的过程tail -f /var/log/message 总结配置dhcp的过程中犯了几个低级错误，导致dhcp服务器启动失败。例如设置的dhcp ip范围与子网掩码不在一个网段，配置文件中的格式错误等等。但是日志里面会告诉你哪个地方出错了 可以通过分析日志文件来快速找出问题所在！现在充分了解了日志文件的重要性！！！","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://www.wangxuezhang.xin/tags/linux/"}]},{"title":"Ubuntu下搭建owncloud私有云平台","slug":"Ubuntu下搭建owncloud私有云平台","date":"2018-03-27T10:30:13.000Z","updated":"2018-03-28T08:10:43.888Z","comments":true,"path":"2018/03/27/Ubuntu下搭建owncloud私有云平台/","link":"","permalink":"http://www.wangxuezhang.xin/2018/03/27/Ubuntu下搭建owncloud私有云平台/","excerpt":"owncloudownCloud是一个自由且开源的个人云存储解决方案(类似百度网盘或者Dropbox)，包括两个部分：服务器和客户端。 ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能打开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。 除了云存储之外，ownCloud也可用于同步行事历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能。 搭建的目的ftp服务器虽然能储存东西，但是不能在线预览。最近下载了一些教学视频，无奈自己笔记本硬盘太小，所以就想搭建一个能在线浏览pdf和视频的云平台。主要用于校园网里面。","text":"owncloudownCloud是一个自由且开源的个人云存储解决方案(类似百度网盘或者Dropbox)，包括两个部分：服务器和客户端。 ownCloud在客户端可通过网页界面，或者安装专用的客户端软件来使用。网页界面当然就是任何能打开网页的平台都支持，而客户端软件也支持相当多平台，Windows、Linux、iOS、Android皆有。 除了云存储之外，ownCloud也可用于同步行事历、电子邮件联系人、网页浏览器的书签；此外还有多人在线文件同步协作的功能。 搭建的目的ftp服务器虽然能储存东西，但是不能在线预览。最近下载了一些教学视频，无奈自己笔记本硬盘太小，所以就想搭建一个能在线浏览pdf和视频的云平台。主要用于校园网里面。 环境搭建过程服务器：Ubuntu 16.04 IP:10.22.30.20····························第一步:安装apache2apt install apache2 -y 安装完成后，浏览器访问服务器地址出现以下界面代表安装成功 PS:注意防火墙开放80端口····························第二步:安装mysqlapt-get install mysql-server mysql-client -y安装过程中会要求设置数据库密码安装完成后 mysql -u root -p出现以下界面代表安装mysql安装成功····························第三步:安装phpmyadminapt-get install phpmyadmin出现下图界面选apache2 输入mysql的密码 安装完成后在浏览器访问10.22.30.20/phpmyadmin,账号是root，密码是mysql的密码 登录后创建数据库 ····························第四步:安装PHPapt-get install php -y owncloud服务端搭建解压下载好的owncloud-9.1.0.zip(可以去owncloud官网下载)unzip owncloud-9.1.0.zip将owncloud移动到/var/www/html 目录下root@wlzx:/home/wlzx# mv owncloud /var/www/html/建立数据文件夹，并赋予权限cd /var/www/html/owncloudroot@wlzx:/var/www/html/owncloud# mkdir dataroot@wlzx:/var/www/html/owncloud# chown -R www-data:www-data dataroot@wlzx:/var/www/html/owncloud# chown -R www-data:www-data configroot@wlzx:/var/www/html/owncloud# chown -R www-data:www-data apps····························修改apache2的配置文件vim /etc/apache2/apache2.conf重新启动模块 a2enmod rewrite a2enmod headers 重新启动apache2 sudo service apache2 restart ····························访问10.22.30.20/owncloud,发现少了两个模块安装curl模块root@wlzx:/var/www/html/owncloud# apt-get install php-curl -y安装zip模块root@wlzx:/var/www/html/owncloud/zip-1.13.5# apt-get install php-zip重启apache2服务root@wlzx:/var/www/html/owncloud/zip-1.13.5# /etc/init.d/apache2 restart再次访问10.22.30.20/owncloud，设置好管理员密码，数据库账号、密码、数据库名称 至此这个云服务器就能正常访问啦 修改上传限制由于owncloud默认现在最大上传大小为513M，有些大文件上传不了，所以需要修改一下配置文件(owncloud目录下的.htaccess 文件) 然后就能上传大文件了 owncloud还可以挂载ftp站点，添加一些其它的插件！","categories":[],"tags":[]},{"title":"shell 编程 备忘录","slug":"shell-编程-备忘录","date":"2018-03-23T12:09:16.000Z","updated":"2018-03-30T10:50:38.298Z","comments":true,"path":"2018/03/23/shell-编程-备忘录/","link":"","permalink":"http://www.wangxuezhang.xin/2018/03/23/shell-编程-备忘录/","excerpt":"复习一下shell编程 备忘 if 条件判断语句案例一 测试数字的大小12345#!/bin/bashNUM=100if (($NUM &gt; 4)); thenecho &quot;thi num is $NUM greater 4!&quot;fi [root@localhost shell]# bash 1.shthis num is 100 greater 4!","text":"复习一下shell编程 备忘 if 条件判断语句案例一 测试数字的大小12345#!/bin/bashNUM=100if (($NUM &gt; 4)); thenecho &quot;thi num is $NUM greater 4!&quot;fi [root@localhost shell]# bash 1.shthis num is 100 greater 4! 案例二 测试目录是否存在，不存在则新建12345#！/bin/bashif [! -d /root/test/wang]; thenmkdir -p /root/test/wangelse echo &quot;This dir is exist!!!&quot; [root@localhost shell]# bash testfile.shThis dir is exist!!!PS：若该目录不存在则会新建目录 逻辑运算符解析：-f 判断文件是否存在 eg: if [ -f filename ]-d 判断目录是否存在 eg: if [ -d dir ]-eq 等于 应用于：整型比较-ne 不等于 应用于：整型比较-lt 小于 应用于：整型比较-gt 大于 应用于：整型比较-le 小于或等于 应用于：整型比较-ge 大于或等于 应用于：整型比较-a 双方都成立（and） 逻辑表达式 –a 逻辑表达式-o 单方成立（or） 逻辑表达式 –o 逻辑表达式-z 空字符串 案例三 多个条件测试判断1234567891011#!/bin/bashs=80;if [[ $s -gt 85 ]] ; thenecho &quot;very good!&quot;;elif [[ $s -gt 75 ]] ; thenecho &quot;good!&quot;;elif [[ $s -gt 60 ]] ; then echo &quot;pass!&quot;;elseecho &quot;no pass!&quot;;fi [root@localhost shell]# bash many.shgood for 循环语句案例一 打印seq多个数12345#!/bin/bashfor i in `seq 5`do echo &quot;Num is $i&quot;done [root@localhost shell]# bash seq.shNum is 1Num is 2Num is 3Num is 4Num is 5 案例二 找到相关 log，然后批量打包12345#!/bin/bashfor i in `find /var/log -name &quot;*.log&quot;`do tar -czf 2018.tar $idone [root@localhost shell]# ls1.sh 2018log.tar log.sh many.sh seq.sh testfile.sh var while 循环语句案例一 批量添加20个用户用户名称为userN，N为1-20的数字。1234567#!/bin/bashU_NUM=1while [ $U_NUM -le 20 ] #只要U_NUM小于或等于20，循环一直执行douseradd user$&#123;U_NUM&#125;U_NUM=$((U_NUM+1))done 运行脚本:bash newuser.shlastlog验证结果 案例二 打印网卡配置文件的每一行123456#!/bin/bashFILE=/etc/sysconfig/network-scripts/ifcfg-ens160while read -r linedoecho $linedone &lt; $FILE 运行脚本:bash printnetwork.sh until 语句批量删除用户，用户名称为userN,n(1&lt;=n&lt;=20)1234567#!/bin/bashU_NUM=20until [ $U_NUM -eq 0 ]douserdel user$&#123;U_NUM&#125;U_NUM=$((U_NUM-1))done 执行脚本，验证结果 备份Mysql数据库","categories":[],"tags":[]},{"title":"mysql双机热备的实现","slug":"mysql双机热备的实现","date":"2018-03-16T08:45:00.000Z","updated":"2018-03-17T14:59:10.774Z","comments":true,"path":"2018/03/16/mysql双机热备的实现/","link":"","permalink":"http://www.wangxuezhang.xin/2018/03/16/mysql双机热备的实现/","excerpt":"双机热备概念日常百度百科双机热备百度百科双机热备包括广义与狭义两种。从广义上讲，就是对于重要的服务，使用两台服务器，互相备份，共同执行同一服务。当一台服务器出现故障时，可以由另一台服务器承担服务任务，从而在不需要人工干预的情况下，自动保证系统能持续提供服务。","text":"双机热备概念日常百度百科双机热备百度百科双机热备包括广义与狭义两种。从广义上讲，就是对于重要的服务，使用两台服务器，互相备份，共同执行同一服务。当一台服务器出现故障时，可以由另一台服务器承担服务任务，从而在不需要人工干预的情况下，自动保证系统能持续提供服务。从狭义上讲，双机热备特指基于active/standby方式的服务器热备。服务器数据包括数据库数据同时往两台或多台服务器写，或者使用一个共享的存储设备。在同一时间内只有一台服务器运行。当其中运行着的一台服务器出现故障无法启动时，另一台备份服务器会通过软件诊测（一般是通过心跳诊断）将standby机器激活，保证应用在短时间内完全恢复正常使用。双机热备针对的是服务器的故障。服务器的故障可能由各种原因引起，如设备故障、操作系统故障、软件系统故障等等。一般地讲，在技术人员在现场的情况下，恢复服务器正常可能需要10分钟、几小时甚至几天。从实际经验上看，除非是简单地重启服务器（可能隐患仍然存在），否则往往需要几个小时以上。而如果技术人员不在现场，则恢复服务的时间就更长了。而对于一些重要系统而言，用户是很难忍受这样长时间的服务中断的。因此，就需要通过双机热备，来避免长时间的服务中断，保证系统长期、可靠的服务。决定是否使用双机热备，正确的方法是要分析一下系统的重要性以及对服务中断的容忍程度，以此决定是否使用双机热备。即，你的用户能容忍多长时间恢复服务，如果服务不能恢复会造成多大的影响。 主从复制环境搭建主服务器A：10.22.30.6(centos 7)从服务器B：10.22.30.7(centos 7)mysql:5.6.39(两台服务器都是一样的)这里配置的是主从服务器,其中同步的都是创建的test数据库mysql用户名test，密码123456 主服务器A上的配置1:先创建一个允许从服务器B连接数据库的用户test,密码12345612grant replication slave on *.* to &apos;test&apos;@&apos;10.22.30.7&apos; identified by &apos;123456&apos;;flush privileges; //刷新权限 创建好后在从服务器B上连接测试一下1mysql -h 10.22.30.6 -u root -p 123456 这样表示能连接成功PS:如果连接不进去可以检查一下A服务器上防火墙是否允许3306端口通过。2:在修改主服务器上A的/etc/my.cnf~]# vimlink1234![upload successful](/images/pasted-45.png)3:重启mysql服务,进入mysql查看状态```[root@localhost ~]# service mysqld restart ##重启mysql服务 查看master状态其中File和Position参数是配置从服务器需要的。4:把数据库的锁打开mysql&gt; unlock tables; 从服务器B上的配置1:修改从服务器B上mysql的配置文件~]# vimlink1234![upload successful](/images/pasted-47.png)2:重启mysql服务```[root@root ~]# service mysqld restart 3:指定同步位置slave; #先关闭同步服务```123![upload successful](/images/pasted-48.png)```mysql&gt;start slave;#开启同步服务 4:查看从服务器状态 Slave_IO_Running: YesSlave_SQL_Running: Yes代表同步设置成功。5:测试同步主服务器上在test数据库中创建两个表 从服务器上同步如下 到此mysql主从热备就配置完毕了！ 主主复制主从复制是从服务器同步主服务器，那么主主复制就是两台主机互为主从。下面开始配置 环境搭建环境还是接着用主从复制时候的环境，不过开始前要先把mysql的同步停止。 主服务器B上的配置1:先创建一个允许服务器A远程登录的用户grant replication slave on *.* to 'test'@'10.22.30.6' identified by '123456'1mysql&gt;flush privileges; 2:查看二进制名和位置 然后在主服务器A上填好相应的信息 主服务器A上的配置1:进入数据库，配置一下信息2:开启复制(B服务器上也要开) mysql&gt; start slave;3:查看是否配置成功 Slave_IO_Running:YesSlave_SQL_Runing:Yes代表配置成功 测试同步B服务器上创建stu表并插入数据查看A服务器上同步状态 参考看了很多博客，还是觉得这篇博客写的清楚，膜拜大佬那一叶随风","categories":[{"name":"mysql","slug":"mysql","permalink":"http://www.wangxuezhang.xin/categories/mysql/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://www.wangxuezhang.xin/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"http://www.wangxuezhang.xin/tags/mysql/"}]},{"title":"centos 7.2 安装mysql5.7","slug":"centos-7-2-安装mysql5-7","date":"2018-03-13T09:24:00.000Z","updated":"2018-04-06T05:36:41.386Z","comments":true,"path":"2018/03/13/centos-7-2-安装mysql5-7/","link":"","permalink":"http://www.wangxuezhang.xin/2018/03/13/centos-7-2-安装mysql5-7/","excerpt":"","text":"1:wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm2:rpm -Uvh mysql57-community-release-el7-10.noarch.rpm3:yum install -y mysql-community-server4:service mysqld start5:修改临时密码，mysql5.7安装后会有个随机的密码。查看临时密码grep &#39;temporary password&#39; /var/log/mysqld.log 这里我的密码是6:利用临时密码登录并且修改密码 因为是为了做测试，所以这里密码设置简单一点，但是由于设置简单会报错，所以修改一下规则。set global validate_password_policy=0;set global validate_password_length=1;然后尝试修改密码:ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;qweasd&#39;;设置好后就可以用设置好的密码登录了！出处：Centos7.3 安装Mysql5.7并修改初始密码","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://www.wangxuezhang.xin/tags/mysql/"}]},{"title":"记录一次网络克隆的经验","slug":"记录一次网络克隆的经验","date":"2018-03-08T07:19:00.000Z","updated":"2018-03-11T08:43:14.721Z","comments":true,"path":"2018/03/08/记录一次网络克隆的经验/","link":"","permalink":"http://www.wangxuezhang.xin/2018/03/08/记录一次网络克隆的经验/","excerpt":"场景 学生上课的大机房，其中学生机114台，教师机一台。要求学生机上安装上课必备的一些软件，教师机能够控制所有学生机，并且学生机要做还原。显然是不可能一台一台手动去装的，这时就需要用到网络克隆了。","text":"场景 学生上课的大机房，其中学生机114台，教师机一台。要求学生机上安装上课必备的一些软件，教师机能够控制所有学生机，并且学生机要做还原。显然是不可能一台一台手动去装的，这时就需要用到网络克隆了。 网络克隆下面科普一下网络克隆（都是百度百科上的）网络克隆是一种短时间内在大批量电脑上安装操作系统的一种先进的方法，目前实现的方法主要有两种，一种是在客户机上面使用存放引导文件,这种方法灵活性不太好，另一种方法是使用支持PXE的网卡来从服务器上面下载引导文件，然后装入到客户机中特点：这种快速,大批量安装操作系统的方法越来越受到欢迎,因为,它脱离了以前那种逐台拆开机箱然后安装上光驱或者是用硬盘对拷的麻烦,并且以前的方式稍不注意就有可能因为插拨不当造成设备的损坏具体操作：网络方式所需要做的工作就是准备一台网络服务器,在一台电脑(客户机)上安装系统,然后把这台客户机的系统做成母盘,上传到服务器当中,其他的客户机硬盘分区,系统的安装就很简单了,只需要将客户机从网络引导,即可连接到服务器,轻松的进行系统的安装,其中网络引导指的是从网卡启动,这个需要网卡的支持,如果网卡不支持网络启动的话,那就只能从其他介质进行引导了,可以把引导程序放入到光盘,软盘,移动硬盘,U盘,存储卡等等设备当中,同样可以实现网克的目的。 操作流程(1):首先需要做一个做好的母机，母机上装好机房上课需要的软件。然后准备好maxdos软件(2):开始制作母机的镜像。打开教师机上的maxdos软件 PS：镜像文件路径需要自己选择合适的存放路径 保存好后点击网络设置 启动网卡会默认选择电脑网卡上的IP，所以根据自己喜好随意改，但是要保证启动网卡和起始IP在同一网段下！启动方案后是这样的 只要客户端开机选择网卡启动后连接上来以后点击发送就可以了，然后静静等待母盘制作完成(3):开始批量网络克隆(在开始之前，建议把机房的网络断掉，交换机上的DHCP什么的也都关掉，不然克隆的时候可能出现客服端一直在DHCP界面，找不到服务端分配的地址，容易冲突)设置方案 网络设置还是一样的，重点也是服务端(也就是这里的教师机)和客服端(学生机)在同一网段。 一切设置好之后，启动方案，把机房的电脑设置为网卡启动(不同机器设置方法不同，所以设置方法请自行百度)。机房电脑设置为网卡启动后，开机时会服务端会分配一个地址过去，并且会自动下载引导文件。当教师机上显示机器数目到了需要克隆的机器数目时就可以开始了。…..做的时候只拍下了这两张图片 静静等进度条到达百分百就ok了。中间有些部分没有图片，下次做的时候在补上！","categories":[],"tags":[]},{"title":"校园网拓扑图","slug":"校园网拓扑图","date":"2018-01-11T05:44:30.000Z","updated":"2018-01-13T07:01:23.296Z","comments":true,"path":"2018/01/11/校园网拓扑图/","link":"","permalink":"http://www.wangxuezhang.xin/2018/01/11/校园网拓扑图/","excerpt":"拓扑图如下: 题目要求如下：1.按照图中所示配置校园网内的vlan2.教学楼交换机配置pvst生成树 对于vlan100，阻塞教学楼交换机1的6号端口和教学楼交换机3的5号端口 对于vlan200，阻塞教学楼交换机2的6号端口和教学楼交换机3的7号端口3.校园网内主机通过DHCP获得IP地址4.校园网内互通，通过WiFi连接的校内主机可以通过域名访问www.hhtc.edu.cn5.校内主机不能访问财务处的主机，但是财务处主机2除外6.校园网设备上配置管理VLAN99，可以通过vty登录任何设备7.Router0 和 Router1之间配置帧中继点到点网络8.Router0 和 Router2之间配置ppp chap认证，密码hhtc9.在需要的网络设备上配置动态路由协议10.Router0上配置NAT,实现校园网内主机能够通过NAT转换后访问www.taobao.compc7能够访问www.hhtc.edu.cn","text":"拓扑图如下: 题目要求如下：1.按照图中所示配置校园网内的vlan2.教学楼交换机配置pvst生成树 对于vlan100，阻塞教学楼交换机1的6号端口和教学楼交换机3的5号端口 对于vlan200，阻塞教学楼交换机2的6号端口和教学楼交换机3的7号端口3.校园网内主机通过DHCP获得IP地址4.校园网内互通，通过WiFi连接的校内主机可以通过域名访问www.hhtc.edu.cn5.校内主机不能访问财务处的主机，但是财务处主机2除外6.校园网设备上配置管理VLAN99，可以通过vty登录任何设备7.Router0 和 Router1之间配置帧中继点到点网络8.Router0 和 Router2之间配置ppp chap认证，密码hhtc9.在需要的网络设备上配置动态路由协议10.Router0上配置NAT,实现校园网内主机能够通过NAT转换后访问www.taobao.compc7能够访问www.hhtc.edu.cn 设置VLAN先在三层交换机上设置所有的VLAN配置如下：1234567891011121314151617181920212223242526Switch#configure terminal Switch(config)#vlan 11Switch(config-vlan)#exitSwitch(config)#vlan 22Switch(config-vlan)#exitSwitch(config)#vlan 100Switch(config-vlan)#exitSwitch(config)#vlan 200Switch(config-vlan)#exitSwitch(config)#vlan 300Switch(config-vlan)#exitSwitch(config)#interface vlan 11Switch(config-if)#ip address 10.1.11.254 255.255.255.0 //设置vlan11的网关Switch(config-if)#exitSwitch(config)#interface vlan 22Switch(config-if)#ip address 10.1.22.254 255.255.255.0Switch(config-if)#exitSwitch(config)#interface vlan 100Switch(config-if)#ip address 10.2.0.254 255.255.128.0Switch(config-if)#exitSwitch(config)#interface vlan 200Switch(config-if)#ip address 10.2.128.254 255.255.128.0Switch(config-if)#exitSwitch(config)#interface vlan 300Switch(config-if)#ip address 10.3.0.254 255.255.0.0Switch(config)ip routing //记得开启这个功能，要不然不同VLAN间不能通信...... 设置DHCP这是在三层交换机上设置DHCP，在路由器上或者服务器上设置DHCP也是可以的配置如下：1234567891011121314151617181920212223242526272829设置VLAN11Switch(config)#ip dhcp pool vlan11 //设置相应的VLANSwitch(dhcp-config)#default-router 10.1.11.254 //设置VLAN对应的网关Switch(dhcp-config)#network 10.1.11.0 255.255.255.0 //设置分配的地址池Switch(dhcp-config)#dns-server 10.1.1.2 //设置默认的DNS地址Switch(dhcp-config)#exit设置VLAN22Switch(config)#ip dhcp pool vlan22Switch(dhcp-config)#default-router 10.1.22.254Switch(dhcp-config)#network 10.1.22.0 255.255.255.0Switch(dhcp-config)#dns-server 10.1.1.2设置VLAN100Switch(dhcp-config)#exitSwitch(config)#ip dhcp pool vlan100Switch(dhcp-config)#default-router 10.2.0.254Switch(dhcp-config)#network 10.2.0.0 255.255.128.0Switch(dhcp-config)#dns-server 10.1.1.2设置VLAN200Switch(dhcp-config)#exitSwitch(config)#ip dhcp pool vlan200Switch(dhcp-config)#default-router 10.2.128.254Switch(dhcp-config)#network 10.2.128.0 255.255.128.0Switch(dhcp-config)#dns-server 10.1.1.2设置VLAN300Switch(config)#ip dhcp pool vlan300Switch(dhcp-config)#default-router 10.3.0.254Switch(dhcp-config)#network 10.3.0.0 255.255.0.0Switch(dhcp-config)#dns-server 10.1.1.2Switch(config)#service dhcp 设置trunk把与交换机相连的接口全部设置为TRUNK模式TRUNK是端口汇聚的意思，允许交换机与交换机、交换机与路由器、主机与交换机或路由器之间通过两个或多个端口并行连接同时传输以提供更高带宽、更大吞吐量， 大幅度提供整个网络能力。VLAN TRUNK一般是你设置了多个VLAN后，想通过一个端口传输多个VLAN，这个后需要把该端口设置为TRUNK了。trunk 设置好后，pc机就能分配到相应的IP地址了如图所示： 并且不同VLAN间能直接通信 开启三层交换机的路由功能三层交换机与路由器相连的端口是24号端口，所以需要把三层交换机的端口改为路由端口，配置如下：12345678Switch(config)#interface fastEthernet 0/24Switch(config-if)#no switchport //改为路由接口Switch(config-if)#ip address 10.4.4.4 255.255.255.0 //设置接口的地址Switch(config)#exitSwitch(config)#ip route 0.0.0.0 0.0.0.0 fastEthernet 0/24 //配置默认路由Switch(config)#route eigrp 1Switch(config-router)#network 10.0.0.0Switch(config-router)#no auto-summary 这样在宿舍楼区域就能ping 10.4.4.4了。 Router0上的设置先设置网络中心的网关1234Router#configure terminal Router(config)#interface fastEthernet 0/0Router(config-if)#no shutdown //开启该端口Router(config-if)#ip address 10.1.1.254 255.255.255.0 然后让校园网与网络中心互通123456789101112Router(config)#interface fastEthernet 0/1Router(config-if)#no shutdown Router(config-if)#ip address 10.4.4.5 255.255.255.0 //设置端口1的地址Router(config-if)#exitRouter(config)#ip route 0.0.0.0 0.0.0.0 fastEthernet 0/0Router(config)#ip route 0.0.0.0 0.0.0.0 fastEthernet 0/1Router(config)#ip route 0.0.0.0 0.0.0.0 serial 0/0/0Router(config)#ip route 0.0.0.0 0.0.0.0 serial 0/0/1PS：为了方便，把所有接口的默认路由都设置了Router(config)#route eigrp 1 //选择eigrp协议Router(config-router)#network 10.0.0.0Router(config-router)#no auto-summary 测试结果如下： 宿舍楼的电脑能成功的访问www.hhtc.edu.cn至此，内网全部互通。 帧中继Router0 和 Router1之间配置帧中继点到点网络帧中继（Frame Relay, FR）是面向连接的第二层传输协议，帧中继是典型的包交换技术。相比而言，同样带宽的帧中继通信费用比 DDN 专线要低，而且允许用户在帧中继交换网络比较空闲的时候以高于 ISP 所承诺的速率进行传输。下面进行配置，先配置帧中继云 LMI选择cisco，DLCI值可以任意填写。Route0上的配置：1234567891011Router(config)#interface serial 0/0/0Router(config-if)#no shutdownRouter(config-if)#encapsulation frame-relay //封装帧中继 Router(config-if)#frame-relay lmi-type cisco //帧中继类型为ciscoRouter(config-if)#exitRouter(config)#interface serial 0/0/0.1 point-to-point //配置子接口为点对点模式Router(config-subif)#ip address 192.168.1.1 255.255.255.0Router(config-subif)#frame-relay interface-dlci 103 //dlci值填写刚刚设置好的dlci值启动eigrp路由，添加新的路由Router(config)#router eigrp 1Router(config-router)#network 192.168.1.0 Router1上的配置123456789101112131415161718Router(config)#interface serial 0/0/0Router(config-if)#no shutdownRouter(config-if)#encapsulation frame-relay //封装帧中继 Router(config-if)#frame-relay lmi-type cisco //帧中继类型为ciscoRouter(config-if)#exitRouter(config)#interface serial 0/0/0.1 point-to-point //配置子接口为点对点模式Router(config-subif)#ip address 192.168.1.2 255.255.255.0Router(config-subif)#frame-relay interface-dlci 301 //dlci值填写刚刚设置好的dlci值启动eigrp路由，添加新的路由Router(config)#router eigrp 1Router(config-router)#network 192.168.1.0顺便把taobao服务器的网关设置好吧Router(config)#interface fastEthernet 0/0Router(config-if)#ip address 172.16.1.254 255.255.255.0Router(config-if)#no shutdownRouter(config-if)#exitRouter(config)#router eigrp 1Router(config-router)#network 172.16.0.0 这样帧中继就配置好了，两个路由器就能互相ping通了 并且用show ip route 可以看到路由表 配置ACL整个网络都能互相通信了，接下来就配置ACL了。访问控制列表简称为 ACL，它使用包过滤技术，在路由器上读取第三层及第四层包头中的信息如源地址、目的地址、源端口、目的端口等，根据预先定义好的规则对包进行过滤，从而达到访问控制的目的。ACL 分很多种，不同场合应用不同种类的 ACL。这个场景中是要求:校内主机不能访问财务处的主机，但是财务处主机2除外","categories":[],"tags":[]},{"title":"思科CCNA大综合实验","slug":"思科CCN大综合实验","date":"2018-01-08T06:24:00.000Z","updated":"2018-01-09T11:43:58.861Z","comments":true,"path":"2018/01/08/思科CCN大综合实验/","link":"","permalink":"http://www.wangxuezhang.xin/2018/01/08/思科CCN大综合实验/","excerpt":"拓扑图如下： 思科模拟器上的是这样的 题目要求太多了，一点一点做起吧","text":"拓扑图如下： 思科模拟器上的是这样的 题目要求太多了，一点一点做起吧 Etherchannel之前没怎么见过这东西，不怎么熟悉，所以还说上百度百科Etherchannel题目要求是：做Etherchannel 捆绑Sw1 与Sw2 的F0/11,F0/12 接口. 要求使用Cisco PAGP 协议中的主动协商模式Sw1的配置：123Sw1(config)#interface range fastEthernet 0/11-12Sw1(config-if-range)#switchport mode trunk Sw1(config-if-range)#channel-group 1 mode desirable Sw2的配置跟Sw1的一样 管理vlan访问控制题目要求：在Sw1 上设置管理vlan 10, 地址为192.168.1.10/24; 管理vlan 20, 地址为192.168.2.10/24.做ACL 访问控制, 要求只有PC1/PC2 可以远程访问Sw1.这需要ACL，也就是访问控制列表，这里用到的是标准ACL配置如下：1234567891011Sw1(config)#interface vlan 10Sw1(config-if)#ip address 192.168.1.10 255.255.255.0 //设置vlan10的管理地址Sw1(config-if)#exitSw1(config)#interface vlan 20Sw1(config-if)#Sw1(config-if)#ip address 192.168.2.10 255.255.255.0 //设置vlan20的管理地址Sw1(config-if)#exitSw1(config)#access-list 1 permit host 192.168.1.1 //设置ACLSw1(config)#access-list 1 permit host 192.168.2.1 //设置ACLSw1(config)#line vty 0 15Sw1(config-line)#access-class 1 in 单臂路由用R1上的F1/0.10作为VLAN10的出口网关用R3上的F2/0.20作为VLAN20的出口网关 先上百度百科充实一下自己的知识：单臂路由（router-on-a-stick）是指在路由器的一个接口上通过配置子接口（或“逻辑接口”，并不存在真正物理接口）的方式，实现原来相互隔离的不同VLAN（虚拟局域网）之间的互联互通。优缺点：VLAN能有效分割局域网，实现各网络区域之间的访问控制。但现实中，往往需要配置某些VLAN之间的互联互通。比如，你的公司划分为领导层、销售部、财务部、人力部、科技部、审计部，并为不同部门配置了不同的VLAN，部门之间不能相互访问，有效保证了各部门的信息安全。但经常出现领导层需要跨越VLAN访问其他各个部门，这个功能就由单臂路由来实现。优点：实现不同vlan之间的通信，有助理解、学习VLAN原理和子接口概念。缺点：容易成为网络单点故障，配置稍有复杂，现实意义不大。 下面开始配置单臂路由：交换机SW1和SW2上已经在接口1和2上分别设置好了vlan10和vlan20只要配置路由器上的就好了R1上的配置1234567R1#configure terminalR1(config)#interface f1/0R1(config-if)#no shutdown //开启端口R1(config-if)#exitR1(config)#interface f1/0.10 //进入子接口R1(config-subif)#encpuslation dotlQ 10 //为子接口封装802.1Q 协议，10是VLAN号R1(config-subif)#ip address 192.168.1.254 255.255.255.0 //划分网关和子网掩码 R3上的配置1234567R3#configure terminalR3(config)#interface f1/0R3(config-if)#no shutdown //开启端口R3(config-if)#exitR3(config)#interface f1/0.20 //进入子接口R3(config-subif)#encpuslation dotlQ 20 //为子接口封装802.1Q 协议，20是VLAN号R1(config-subif)#ip address 192.168.2.254 255.255.255.0 //划分网关和子网掩码 RIPv2等价负载均衡等价负载均衡(Equal-Cost Load Sharing)：是将流量均等地分布到多条度量相同的路径上，RIP的Metric是跳数 OSPF题目要求：在R1/R2/R3/R4 上配置单区域(area 0)OSPF, 使得全网互通（R4与运营商R5的S0/0不宣告）OSPF:OSPF(Open Shortest Path First开放式最短路径优先）是一个内部网关协议(Interior Gateway Protocol，简称IGP），用于在单一自治系统（autonomous system，AS）内决策路由。是对链路状态路由协议的一种实现，隶属内部网关协议（IGP），故运作于自治系统内部。著名的迪克斯加算法(Dijkstra)被用来计算最短路径树。OSPF分为OSPFv2和OSPFv3两个版本,其中OSPFv2用在IPv4网络，OSPFv3用在IPv6网络。OSPFv2是由RFC 2328定义的，OSPFv3是由RFC 5340定义的。与RIP相比，OSPF是链路状态协议，而RIP是距离矢量协议。 不同厂商管理距离不同，思科OSPF的协议管理距离（AD）是110，华为OSPF的协议管理距离是10。更详细的解释可以直接上互动百科(OSPF):[http://www.baike.com/wiki/OSPF%E5%8D%8F%E8%AE%AE]然后是路由器的配置R1的配置：123456R1#configure tR1(config)#router ospf 1R1(config-router)#netwR1(config-router)#network 10.0.0.0 0.255.255.255 area 0R1(config-router)#network 172.16.0.0 0.255.255.255 area 0R1(config-router)#network 192.168.1.0 0.255.255.255 area 0 R2的配置：1234R2#configure terminal R2(config)#router ospf 1R2(config-router)#network 10.0.0.0 0.255.255.255 arR2(config-router)#network 10.0.0.0 0.255.255.255 area 0 R3的配置：12345R3#configure terminal R3(config)#router ospf 1R3(config-router)#network 10.0.0.0 0.255.255.255 area 0R3(config-router)#network 172.16.0.0 0.255.255.255 area 0R3(config-router)#network 192.168.2.0 0.255.255.255 area 0 R4的配置:123R4#configure terminal R4(config)#router ospf 1R4(config-router)#network 172.16.0.0 0.255.255.255 area 0 EIGRP题目要求:在R1/R2/R3/R4 上配置EIGRP( 关闭自动汇总), 使得全网互通. 要求使用反掩码宣告准确的接口地址[R4与运营商R5 的S0/0 接口不宣告]R1的配置：123456R1(config)#router eigrp 1R1(config-router)#no auto-summaryR1(config-router)#network 10.1.1.1 0.0.0.0R1(config-router)#network 10.10.10.11 0.0.0.0R1(config-router)#network 172.16.1.1 0.0.0.0R1(config-router)#network 192.168.1.254 0.0.0.0 R2的配置：1234R2(config)#router eigrp 1R2(config-router)#no auto-summaryR2(config-router)#network 10.1.1.2 0.0.0.0R2(config-router)#network 10.2.2.2 0.0.0.0 R3的配置:12345R3(config)#router eigrp 1R3(config-router)#no auto-summaryR3(config-router)#network 10.2.2.3 0.0.0.0R3(config-router)#network 172.16.2.3 0.0.0.0R3(config-router)#network 192.168.2.254 0.0.0.0 R4的配置:1234R4(config)#router eigrp 1R4(config-router)#no auto-summaryR4(config-router)#network 172.16.1.4 0.0.0.0R4(config-router)#network 172.16.2.4 0.0.0.0 EIGRP- 非等价负载均衡ACL题目要求：在R1上做ACL 访问限制: 所有用户都可以ping 通Server;除PC1 和PC4 以外, 其他用户都可以访问内部网站.R1上的配置:1234R1#configure terminal R1(config)#access-list 100 deny tcp host 192.168.1.1 host 10.10.10.10 eq www //禁止PC1访问服务器R1(config)#access-list 100 deny tcp host 192.168.2.2 host 10.10.10.10 eq www //禁止PC4访问服务器R1(config)#access-list 100 permit ip any any //允许其它的通过","categories":[{"name":"思科","slug":"思科","permalink":"http://www.wangxuezhang.xin/categories/思科/"}],"tags":[{"name":"思科","slug":"思科","permalink":"http://www.wangxuezhang.xin/tags/思科/"}]},{"title":"Python利用requests批量检测URL","slug":"Python利用requests批量检测URL","date":"2018-01-02T12:33:00.000Z","updated":"2018-01-02T13:00:29.506Z","comments":true,"path":"2018/01/02/Python利用requests批量检测URL/","link":"","permalink":"http://www.wangxuezhang.xin/2018/01/02/Python利用requests批量检测URL/","excerpt":"利用python的requests检测单个URL的返回值先安装所需要的requests库pip install requests 打开IDIE123import requestsresponse = requests.get(&quot;http://www.baidu.com&quot;)response.status_code PS: response.status_code=200表示服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。","text":"利用python的requests检测单个URL的返回值先安装所需要的requests库pip install requests 打开IDIE123import requestsresponse = requests.get(&quot;http://www.baidu.com&quot;)response.status_code PS: response.status_code=200表示服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 批量检测URL直接上代码123456789101112131415161718192021import requestsheaders = &#123; &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36&quot;&#125;with open(&apos;sort1.txt&apos;,&apos;r&apos;) as file: urls = file.readlines() for url in urls: url = url.strip(&quot;\\n&quot;).strip(&quot;\\ufeff&quot;) try: response = requests.get(url,headers = headers,timeout = 3) if response.status_code == 200: print(&apos;success open++++&apos;+ url) with open(&apos;success.txt&apos;,&apos;a&apos;) as file1: success = file1.write(url+&apos;\\n&apos;) else: print(&apos;--------&apos;) except Exception as e: with open(&apos;failed.txt&apos;,&apos;w&apos;) as file2: error = file2.write(url + &quot;\\n&quot;) 这段代码中，把返回状态码为200的保存到了success.txt中，把异常的保存到了failed.txt中但是，它虽然能达到检测的效果，但是有时候运行起来特别慢，还得多学习优化的方法 后续：python还有其它方法也能检测URL的状态，日后会努力补上！","categories":[{"name":"python","slug":"python","permalink":"http://www.wangxuezhang.xin/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.wangxuezhang.xin/tags/python/"}]},{"title":"Python 生成不重复字符串组合","slug":"Python-生成不重复字符串组合","date":"2017-12-31T03:55:00.000Z","updated":"2018-04-06T05:32:04.335Z","comments":true,"path":"2017/12/31/Python-生成不重复字符串组合/","link":"","permalink":"http://www.wangxuezhang.xin/2017/12/31/Python-生成不重复字符串组合/","excerpt":"","text":"给出一个字符串，并利用python生成不重复字符串的所有组合12345import itertools words = &apos;4189t&apos; with open(&apos;sort1.txt&apos;,&apos;w&apos;) as file: for i in itertools.permutations(words,5): file.write(&quot;http://www.&quot;+&quot;&quot;.join(i)+&quot;.com\\n&quot;) 我这里是生成字符串’4189t’的所有不重复字符串的组合，并且把所有组合方式导入到文件sort1.txt中，””.join(i)前后加的东西是我需要保存的链接形式.","categories":[{"name":"python","slug":"python","permalink":"http://www.wangxuezhang.xin/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.wangxuezhang.xin/tags/python/"}]},{"title":"hexo s报错","slug":"hexo-s报错","date":"2017-12-30T06:06:00.000Z","updated":"2017-12-30T06:41:02.924Z","comments":true,"path":"2017/12/30/hexo-s报错/","link":"","permalink":"http://www.wangxuezhang.xin/2017/12/30/hexo-s报错/","excerpt":"想起来就心痛，昨天由于ubuntu上的vim配置出了点问题，于是就想卸载重装，但是插件太多，自己又想偷懒，就一个命令运行下来locate vimrc | xargs rm -rf删除后发现还是报错，就将错就错,又是一条命令下来locate vim | xargs rm -rf","text":"想起来就心痛，昨天由于ubuntu上的vim配置出了点问题，于是就想卸载重装，但是插件太多，自己又想偷懒，就一个命令运行下来locate vimrc | xargs rm -rf删除后发现还是报错，就将错就错,又是一条命令下来locate vim | xargs rm -rf就这样，成功的，我的vim重装后连insert都不显示了…… 费了好大功夫把vim装好后，准备运行hexo博客看一下FATAL Cannot find module &#39;./vimeo&#39; Error: Cannot find module &#39;./vimeo&#39; 结局是这样的,吓得我赶紧npm install重新安装依赖，但是还是没用npm install --save vimeo,命令是运行成功了，当然错误也是一样的…去度娘逛了一圈，没有发现有人跟我报错是一样的（应该没有人像我那么傻，那么冲动…）慌的我东西都备份好了，准备重装了，但是！！！重点来了，临死之前我的抢救还是成功了，npm install hexo --vimeo这样终于成功的安装好了这个模块,命令终于运行成功了，真是一把心酸一把泪啊！以后再也不敢乱用删除命令了！！！！","categories":[{"name":"hexo","slug":"hexo","permalink":"http://www.wangxuezhang.xin/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.wangxuezhang.xin/tags/hexo/"}]},{"title":"hexo写博客的基本方法","slug":"hexo写博客的基本方法","date":"2017-12-28T07:34:00.000Z","updated":"2017-12-31T04:16:32.539Z","comments":true,"path":"2017/12/28/hexo写博客的基本方法/","link":"","permalink":"http://www.wangxuezhang.xin/2017/12/28/hexo写博客的基本方法/","excerpt":"前言: 刚刚搭建好hexo博客，准备写第一篇博客的时候意识到了一些问题，可能是因为自己没怎么用过markdown这个编辑器，所以不怎么熟悉，但是通过各种百度后终于知道了该怎么便捷的写自己的博客 问题1：在哪里写博客？","text":"前言: 刚刚搭建好hexo博客，准备写第一篇博客的时候意识到了一些问题，可能是因为自己没怎么用过markdown这个编辑器，所以不怎么熟悉，但是通过各种百度后终于知道了该怎么便捷的写自己的博客 问题1：在哪里写博客？ 由于我的博客是搭在云服务器ubuntu上的，所以写博客的时候不可能直接进去用vim编辑吧，后面通过百度找到了解决办法 —安装hexo的admin后台 安装hexo后端管理插件npm install –save hexo-admin —安装插件hexo s —运行hexo服务器本地打开http://localhost:4000/admin/ 就可以看到后台啦 配置hexo后端管理插件完成上述配置后，打开后台是不需要密码的，为了安全性起见，需要设置后台账号和密码先进入后台，到setting中点击Setup authentification here进去之后是这样的 在里面输入对应的信息,下面就会生成相应的代码，例如: 把代码复制到hexo的_config.yml文件中，然后hexo s运行再进入后台就需要自己设置的账号和密码了 问题2：markdown的一些语法要求准备自己编辑文章的时候发现不知怎么用markdown来写文章，于是去查看Markdown 语法说明知道了怎么写小标题，举个例子 一个#就是以及标题，两个#就二级标题，也就是说几个#对应几级标题，需要注意的是输入#的时候颜色会变成蓝色，要在#后面空格输入后的内容才是标题 问题3：文中添加文字链接直接上图 [这是链接的标题](这是url)按照这个格式输入后就是点击链接标题就会跳转到相应的链接了 问题4：如何设置阅读全文next主题是默认展开全文的，文章多了就会显得特别繁琐，所以我们需要设置程这个样子 方法很简单，只要在你想断开的地方输入&lt;!--more--&gt;就行了 问题5：文中添加代码块单行代码只需在代码前后添加一个`多行代码需要在代码前后添加三个```","categories":[{"name":"hexo","slug":"hexo","permalink":"http://www.wangxuezhang.xin/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.wangxuezhang.xin/tags/hexo/"}]},{"title":"智动大闯关","slug":"智动大闯关","date":"2017-12-27T15:25:12.000Z","updated":"2017-12-27T15:34:04.706Z","comments":true,"path":"2017/12/27/智动大闯关/","link":"","permalink":"http://www.wangxuezhang.xin/2017/12/27/智动大闯关/","excerpt":"","text":"智动大闯关第22关firebug 查看源码发现 其中content里面的就是密码，直接提交进入第23关","categories":[{"name":"智动大闯关","slug":"智动大闯关","permalink":"http://www.wangxuezhang.xin/categories/智动大闯关/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://www.wangxuezhang.xin/tags/ctf/"}]},{"title":"阿里云ubuntu服务器搭建Hexo博客中遇到的问题","slug":"hello-world","date":"2017-12-27T09:28:00.000Z","updated":"2017-12-28T07:33:36.203Z","comments":true,"path":"2017/12/27/hello-world/","link":"","permalink":"http://www.wangxuezhang.xin/2017/12/27/hello-world/","excerpt":"搭建的环境:阿里云的Ubuntu16.04 服务器 搭建的流程:","text":"搭建的环境:阿里云的Ubuntu16.04 服务器 搭建的流程: 搭建过程中还是蛮顺利的，直接参照百度就能跟着搭建出来。但是搭建后hexo s 运行的时候出现了一个问题卡了蛮久的。hexo s 能正常运行，就是用电脑浏览器一直访问不了，换了各种端口都没用，关闭防火墙也没用。各种百度后找到了问题所在:就是阿里云服务器的安全组规则没有开启4000端口 根据要求把4000端口开启就行了然后就能通过IP访问刚刚建好的博客了，哈哈 搭建后主题方面的设置我选择的是next主题，参照hexo中文文档就next中文文档想进行一些特殊的设置可以参照 hexo的next主题个性化教程：打造炫酷网站一切搞好后，炫酷的博客就出炉啦","categories":[{"name":"hexo","slug":"hexo","permalink":"http://www.wangxuezhang.xin/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.wangxuezhang.xin/tags/hexo/"}]}]}